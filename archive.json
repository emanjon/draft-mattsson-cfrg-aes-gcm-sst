{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-02-27T01:46:16.636678+00:00",
  "repo": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJat8lM5khQ2m",
      "title": "change to zero indexing ",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/1",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-27T09:07:11Z",
      "updatedAt": "2023-04-27T09:11:30Z",
      "closedAt": "2023-04-27T09:11:30Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Fixed in main",
          "createdAt": "2023-04-27T09:11:30Z",
          "updatedAt": "2023-04-27T09:11:30Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOJat8lM5kuWou",
      "title": "Generate AES-GCM-SST Test Vectors",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/2",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-30T11:01:14Z",
      "updatedAt": "2023-05-04T14:51:25Z",
      "closedAt": "2023-05-04T14:51:25Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Fixed in recent commits to main",
          "createdAt": "2023-05-04T14:51:25Z",
          "updatedAt": "2023-05-04T14:51:25Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOJat8lM5k76qf",
      "title": "Make tag dependent on tag length",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/3",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Current suggestion is\r\n\r\n\"An application can make the tag dependent on the tag length by including tag_length in the nonces.\"\r\n\r\nShould consider to make the tag always dependent on the tag length without the user having to include it in the nonce. As this will have some cons it should be evaluated that the pros > cons.\r\n\r\nAES-CCM has tags dependent on the tag length, AES-GCM does not.",
      "createdAt": "2023-05-03T05:18:34Z",
      "updatedAt": "2024-02-24T07:37:59Z",
      "closedAt": "2024-02-24T07:37:59Z",
      "comments": []
    },
    {
      "number": 4,
      "id": "I_kwDOJat8lM5l4jl7",
      "title": "Add reference to Joux",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/4",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-15T05:08:09Z",
      "updatedAt": "2024-02-24T08:24:05Z",
      "closedAt": "2024-02-24T08:24:05Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "```\r\n  Joux:\r\n    target: https://csrc.nist.gov/csrc/media/projects/block-cipher-techniques/documents/bcm/comments/800-38-series-drafts/gcm/joux_comments.pdf\r\n    title: \"Authentication Failures in NIST version of GCM\"\r\n    author:\r\n      -\r\n        ins: A. Joux\r\n    date: February 2006\r\n```",
          "createdAt": "2023-05-28T15:07:02Z",
          "updatedAt": "2023-05-28T15:07:02Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOJat8lM5nAEt4",
      "title": "Change name of A[] example array",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/5",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "A is AAD in RFc5116",
      "createdAt": "2023-05-26T18:35:41Z",
      "updatedAt": "2023-05-28T15:09:11Z",
      "closedAt": "2023-05-28T15:09:11Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "changed to V",
          "createdAt": "2023-05-28T15:09:08Z",
          "updatedAt": "2023-05-28T15:09:08Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOJat8lM5nA0y8",
      "title": "full tag or T",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/6",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-26T21:35:06Z",
      "updatedAt": "2023-05-28T15:08:53Z",
      "closedAt": "2023-05-28T15:08:53Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "fixed in main\r\n\r\nuse full_tag to be able to easily talk about it in the security consider`tion",
          "createdAt": "2023-05-28T15:08:53Z",
          "updatedAt": "2023-05-28T15:08:53Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJat8lM5nBtih",
      "title": "Ref to 5G",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/7",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-27T07:00:42Z",
      "updatedAt": "2024-02-24T07:37:16Z",
      "closedAt": "2024-02-24T07:37:16Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOJat8lM6AT0os",
      "title": "duplicate paragraph in \"Security Considerations\"",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/8",
      "state": "CLOSED",
      "author": "ericlagergren",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The paragraph that starts with \"The GCM-SST tag_length SHOULD NOT be smaller than 4 bytes and cannot be larger than 16 bytes.\" exists twice, but with slightly different wording.",
      "createdAt": "2024-02-25T09:38:36Z",
      "updatedAt": "2024-02-25T20:44:23Z",
      "closedAt": "2024-02-25T20:44:23Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Thanks, that should obviously be fixed. \r\n\r\nI will merge the two paragraphs in -02",
          "createdAt": "2024-02-25T12:17:06Z",
          "updatedAt": "2024-02-25T12:17:06Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Fixed in main",
          "createdAt": "2024-02-25T20:44:23Z",
          "updatedAt": "2024-02-25T20:44:23Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOJat8lM6AT1fd",
      "title": "Usage of `S` could be more clear",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/9",
      "state": "CLOSED",
      "author": "ericlagergren",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It's not bad, but I had to double check that I was reading it right.\n\nAn example of what might be more clear:\n\n```\n5. Let S = zeropad(A) || zeropad(ct)\n6. Let L = LE64(len(ct)) || LE64(len(A))\n7. Let X = POLYVAL(H, S[0], S[1], ..., S[num_chunks(S)-1])\n8. Let full_tag = POLYVAL(Q, X XOR L) XOR M\n```",
      "createdAt": "2024-02-25T09:48:23Z",
      "updatedAt": "2024-02-26T14:28:00Z",
      "closedAt": "2024-02-26T14:28:00Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Thanks. So basically this is two suggestions:\r\n- Separate S and L\r\n- Use num_chunks() instead of m+n\r\n\r\nThe changes would apply to both encryption and decryption\r\n\r\nCurrent specification is\r\n\r\n```\r\n5. Let S = zeropad(A) \\|\\| zeropad(ct) \\|\\| LE64(len(ct)) \\|\\| LE64(len(A))\r\n6. Let X = POLYVAL(H, S[0], S[1], ..., S[m + n - 1])\r\n7. Let full_tag = POLYVAL(Q, X XOR S[m + n]) XOR M\r\n```",
          "createdAt": "2024-02-25T12:14:04Z",
          "updatedAt": "2024-02-25T12:14:04Z"
        },
        {
          "author": "ericlagergren",
          "authorAssociation": "NONE",
          "body": "Yeah. Splitting up S into S and L more clearly describes your intent (two different POLYVAL inputs).\n\nI think `num_chunks` is a more explicit way of saying \"use every chunk in S,\" but there might be a better way of expressing that. Maybe `POLYVAL(H, S...)`? Not sure.",
          "createdAt": "2024-02-25T14:37:16Z",
          "updatedAt": "2024-02-25T18:34:18Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "In RFC 8452 they use\r\n`We note that POLYVAL(H, X_1, X_2, ...) is equal to`\r\nThat would be \r\n`Let X = POLYVAL(H, S[0], S[1], ...)`",
          "createdAt": "2024-02-25T20:46:35Z",
          "updatedAt": "2024-02-25T20:46:35Z"
        },
        {
          "author": "ericlagergren",
          "authorAssociation": "NONE",
          "body": "> That would be\n> Let X = POLYVAL(H, S[0], S[1], ...)\n\nI like that notation. It's pretty obvious what it means (in my opinion, anyway). And then you don't need to worry about `n` and `m`.",
          "createdAt": "2024-02-25T22:50:35Z",
          "updatedAt": "2024-02-25T22:50:35Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "I changed to \"Let X = POLYVAL(H, S[0], S[1], ...)\" in the PR #10 \r\nWill wait for review from co-authors before merging.",
          "createdAt": "2024-02-25T22:59:48Z",
          "updatedAt": "2024-02-25T22:59:48Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Merged #10 which closes this issue",
          "createdAt": "2024-02-26T14:28:00Z",
          "updatedAt": "2024-02-26T14:28:00Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOJat8lM6KUMwc",
      "title": "Adress active attacks on privacy",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/11",
      "state": "CLOSED",
      "author": "bellebaum",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft mentions passive attacks on confidentiality, as well as an adversary's ability to generate forgeries.\r\nThe assumption seems to be that \"a forgery now and then\" is harmless. This however depends very much on the protocol and I believe should be addressed. In particular, it should be mentioned in the security considerations that tag forgeries may have an impact on confidentiality, rather than just integrity and authenticity.\r\n\r\nFor example, consider a protocol which takes noticeably longer to process inputs with a particular bit pattern, say starting with 32 ones (but imagine any form of structured header here). Finding out whether a given ciphertext `c` corresponds to a plaintext starting with the arbitrary 32-bit sequence `B` could involve calculating `c' := c xor ((B xor 111...111)||0000)`, forging a tag for this and measuring the time it takes the recipient to process `c'`.\r\n\r\nThis attack vector is very different from the occasional forged packet problem and may, depending on the context, have severe implications for privacy. In general, this is a special case of a so-called Chosen Ciphertext Attack, and there are many more forms varying e.g. in the number of forged messages that need to be sent. Yehuda Lindell mentioned on the mailing list the possibility of a statement like \"Any attack taking `Q` queries without tags would take `2^t * Q` queries with length-t tags\", but this has not been proven yet. Even if it eventually is proven, the outlined attack above has `Q=1`, so in general, if `2^t` is online bruteforceable, then there is a potential threat to privacy which protocol designers need to be aware of when choosing `t`.",
      "createdAt": "2024-05-28T09:17:17Z",
      "updatedAt": "2024-12-04T21:45:48Z",
      "closedAt": "2024-12-04T21:45:48Z",
      "comments": [
        {
          "author": "bellebaum",
          "authorAssociation": "NONE",
          "body": "To add some numbers:\r\n\r\n[This site by Cisco](https://sec.cloudapps.cisco.com/security/center/resources/network_performance_metrics.html) claims that you can get about 14,880,960 packets per second on a 10Gb/s interface. It might be slightly below that, but let's be conservative and assume `2^24` packets per second. At this rate, a chosen ciphertext attack on the 4-byte variant might take you `2^8` seconds, which is about 5 minutes, thus doable given the lifetime of protocols.\r\n\r\nSo mitigations might include choosing a longer tag and changing keys very frequently, say every minute, or after every message using some kind of ratchet. Ideally, you would choose all three as mitigations.\r\n\r\nE.g. with 64 bit tags, a single forgery takes about `2^40` seconds, which is already about 35k years given no technological improvements, so there is room for future improvements to this attack. Changing a key after every minute would translate to a roughly `2^-34` chance of pulling the attack off within any given minute, which still might not be good enough (it definitely is not for multi-target attacks or longterm attacks), but is at least reasonable.",
          "createdAt": "2024-05-28T09:36:16Z",
          "updatedAt": "2024-05-28T11:51:24Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Good point. That should definitely be described. We will do so in the next update\r\n\r\nI don't think changing keys helps at all for this attack. Using 32-bit tags, the attacker will have a forgery probability of 2^-32 for each packet independently of rekeying. Rekeying only lowers forgery probability if the integrity algorithm is not behaving like an ideal MAC. It also helps to minimize damage in case of key compromise.\r\n\r\n",
          "createdAt": "2024-11-24T09:01:26Z",
          "updatedAt": "2024-11-24T09:01:26Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Fixed in -04",
          "createdAt": "2024-12-04T21:45:48Z",
          "updatedAt": "2024-12-04T21:45:48Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOJat8lM6hPxsn",
      "title": "New paper - Generic Security of GCM-SST",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/12",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "https://eprint.iacr.org/2024/1928\r\n\r\n_\"In this work, we fill this gap and perform a detailed security analysis of GCM-SST. In particular, we prove that GCM-SST achieves security in the nonce-misuse resilience model of Ashur et al.~(CRYPTO 2017), roughly guaranteeing that even if nonces are reused, evaluations of GCM-SST for new nonces are secure. Our security bound also verified the designers' (informal) claim on tag truncation. Additionally, we investigate and describe possibilities to optimize the hashing in GCM-SST further, and we describe a universal forgery attack in a complexity of around , improving over an earlier attack of  complexity of Lindell, when the tag is 32 bits.\"_\r\n\r\nThe draft should refer to this work, in particular to the security proof in the nonce-misuse resilience model, and the improvements of Lindell's attack, which applies if GCM-SST is used without replay protection.\r\n",
      "createdAt": "2024-11-29T14:28:09Z",
      "updatedAt": "2024-12-06T12:03:12Z",
      "closedAt": "2024-12-06T12:03:12Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Several references to the paper was added in -06.",
          "createdAt": "2024-12-01T12:18:34Z",
          "updatedAt": "2024-12-01T12:18:34Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Remaining question is is masking should be replaced with injective non-zero padding",
          "createdAt": "2024-12-05T07:10:56Z",
          "updatedAt": "2024-12-05T07:10:56Z"
        },
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "#14 has been merged into main",
          "createdAt": "2024-12-06T12:02:36Z",
          "updatedAt": "2024-12-06T12:02:36Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOJat8lM6hfKW3",
      "title": "Ideal security for 96-bit tags?",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/15",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The current of P_MAX and A_MAX was based on the P_MAX value of around 2^36 bytes in RFC 5116. This leads to ideal forgery probability for up to 95-bit tags.\r\n\r\nShould we change P_MAX and A_MAX to <= 2^35 bytes to get ideal forgery probability for 96-bit tags?\r\n",
      "createdAt": "2024-12-01T14:45:19Z",
      "updatedAt": "2024-12-04T17:30:49Z",
      "closedAt": "2024-12-04T17:30:49Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Done in main",
          "createdAt": "2024-12-04T17:30:49Z",
          "updatedAt": "2024-12-04T17:30:49Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOJat8lM6iB2uS",
      "title": "Explain the increased security against multiple forgery attacks.",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/16",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Explain the increased security against multiple forgery attacks. Compared to GCM, GCM-SST has much better properties. Very close to ideal tags for up to 96-bit tags.\r\n\r\nLink to \r\nhttps://csrc.nist.gov/csrc/media/projects/block-cipher-techniques/documents/bcm/comments/cwc-gcm/multi-forge-01.pdf\r\n\r\nand \r\n\r\nBSI stating that they recommend use of 96 bit ideal tags. GCM, AES-CCM, AES-CMAC, Poly1305 are not as strong as 96-bit ideal tags.",
      "createdAt": "2024-12-04T17:33:58Z",
      "updatedAt": "2024-12-04T21:54:07Z",
      "closedAt": "2024-12-04T21:54:07Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Fixed in main",
          "createdAt": "2024-12-04T21:54:07Z",
          "updatedAt": "2024-12-04T21:54:07Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOJat8lM6iTCd6",
      "title": "Update test vectors",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/18",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The test vectors are for masking and are not correct for the non-zero padding",
      "createdAt": "2024-12-06T12:03:48Z",
      "updatedAt": "2024-12-14T17:53:16Z",
      "closedAt": "2024-12-14T17:53:16Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOJat8lM6iTXGJ",
      "title": "Explain the use of BE32()",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/19",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "NIST 800-38A does not specify big- och little-endian counters, but big-endian seems to be used in most implementations of counter mode.\r\n\r\nAES-GCM-SIV uses little-endian counters: \"The counter advances by incrementing the first 32 bits interpreted as an unsigned, little-endian integer, wrapping at 2^32.\"\r\nhttps://www.rfc-editor.org/rfc/rfc8452.html\r\n",
      "createdAt": "2024-12-06T12:49:04Z",
      "updatedAt": "2024-12-14T17:53:28Z",
      "closedAt": "2024-12-14T17:53:28Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "I added \"Big-endian counters align with existing implementations of counter mode.\" but as NIST does not require big-endian in counter mode and AES-GCM-SIV uses little-endian counters I think this should be discussed more.",
          "createdAt": "2024-12-08T10:36:49Z",
          "updatedAt": "2024-12-08T10:36:49Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOJat8lM6iY5-h",
      "title": "Discuss replay",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/20",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-07T07:19:03Z",
      "updatedAt": "2024-12-07T22:46:52Z",
      "closedAt": "2024-12-07T22:46:52Z",
      "comments": []
    },
    {
      "number": 21,
      "id": "I_kwDOJat8lM6ibd2Q",
      "title": "Is len(ct) needed?",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/21",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "With the non-zero padding the algorithms looks like this\r\n\r\n```\r\nLet S = zeropad(A) || zeropad(ct || 0x80)\r\nLet L = LE64(len(ct)) || LE64(len(A))\r\n\r\n```\r\n\r\nAs the length of ct is now encoded in S, the len(ct) should not be needed, and that L could be changed to \r\n\r\n```\r\nLet S = zeropad(A) || zeropad(ct || 0x80)\r\nLet L = LE128(len(A))\r\n\r\n```",
      "createdAt": "2024-12-08T10:41:29Z",
      "updatedAt": "2024-12-14T17:53:06Z",
      "closedAt": "2024-12-14T17:53:06Z",
      "comments": []
    },
    {
      "number": 22,
      "id": "I_kwDOJat8lM6ibe-c",
      "title": "Specify Replay protection",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/22",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "There was a comment that GCM-SST should specify replay protection. As a starting point I added this:\r\n\r\n_\"The details of the replay protection mechanism is determined by the security protocol utilizing GCM-SST. If the nonce includes a sequence number, it can be used for replay protection. Alternatively, a separate sequence number can be used, provided there is a one-to-one mapping between sequence numbers and nonces. The choice of a replay protection mechanism depends on factors such as the expected degree of packet reordering, as well as protocol and implementation details. For examples of replay protection mechanisms, see {{RFC4303}} and {{RFC6479}}.\"_\r\n\r\nSpecifying replay protection would involve specifying the format of the nonces. But specifying the format of the nonces would make it hard or impossible to use in existing protocols. If more info on replay protection is needed a better idea is probably to give a concrete example in an appendix.\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2024-12-08T10:52:00Z",
      "updatedAt": "2024-12-14T17:52:59Z",
      "closedAt": "2024-12-14T17:52:59Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Added some more references to an academic paper. An example does not add much value. Each protocol is different.",
          "createdAt": "2024-12-14T17:52:59Z",
          "updatedAt": "2024-12-14T17:52:59Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOJat8lM6ibf9D",
      "title": "Nonce masking",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/23",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Current best practice is to use nonce masking as used in TLS 1.3, DTLS 1.3, QUIC and Ascon\r\nhttps://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-232.ipd.pdf\r\n\r\nThis is currently only mentioned briefly. Could be specified more concretely as in Ascon. Maybe together with an appendix giving a concrete example on how to do replay protection",
      "createdAt": "2024-12-08T10:56:15Z",
      "updatedAt": "2024-12-14T17:52:02Z",
      "closedAt": "2024-12-14T17:52:02Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Added some references. Will not specify more unless that is requested in the future.",
          "createdAt": "2024-12-14T17:52:02Z",
          "updatedAt": "2024-12-14T17:52:02Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOJat8lM6j4H-c",
      "title": "Incorrect \"Bernstein bound\" for Rijndael",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/25",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The \"Bernstein bound\" for Rijndael is incorrect. This would be the bound if used with a 256-bit GHASH.",
      "createdAt": "2024-12-19T06:38:42Z",
      "updatedAt": "2024-12-20T05:36:16Z",
      "closedAt": "2024-12-20T05:36:15Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Should be correct. Same in the GCM proof with trucated tags.",
          "createdAt": "2024-12-20T05:36:15Z",
          "updatedAt": "2024-12-20T05:36:15Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOJat8lM6kP6P1",
      "title": "Test vectors",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/26",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Change names to align with the specification\r\nExpands some tags to 96 bits",
      "createdAt": "2024-12-23T09:41:11Z",
      "updatedAt": "2024-12-23T14:04:44Z",
      "closedAt": "2024-12-23T14:04:44Z",
      "comments": []
    },
    {
      "number": 27,
      "id": "I_kwDOJat8lM6l50OU",
      "title": "Q and q terminology",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/issues/27",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Q is used both as a subkey and in Q_MAX\r\nq is used both for GCM-SST, AES and Rijndael invocations.\r\n\r\nShould be addressed",
      "createdAt": "2025-01-13T09:09:18Z",
      "updatedAt": "2025-01-13T11:23:11Z",
      "closedAt": "2025-01-13T11:23:11Z",
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "Fixed in main",
          "createdAt": "2025-01-13T11:23:11Z",
          "updatedAt": "2025-01-13T11:23:11Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 10,
      "id": "PR_kwDOJat8lM5n2XjJ",
      "title": "Use new variable L for length. New POLYVAL notation for whole S",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/pull/10",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "#9",
      "createdAt": "2024-02-25T20:47:14Z",
      "updatedAt": "2024-12-01T14:34:57Z",
      "baseRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "baseRefName": "main",
      "baseRefOid": "860f77a7c4fcd8ec18f200d72f916c1605d25076",
      "headRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "headRefName": "emanjon-patch-1",
      "headRefOid": "73e3b20207616cab254d3bf1e59ecff2d33cd233",
      "closedAt": "2024-02-26T14:27:22Z",
      "mergedAt": "2024-02-26T14:27:22Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "0e3128cb4eb9258fea0a15c19990a92499dd2ce9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOJat8lM6DqSkx",
      "title": "Replace masking with injective non-zero padding.",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/pull/13",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-01T12:28:54Z",
      "updatedAt": "2024-12-01T14:34:55Z",
      "baseRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "baseRefName": "main",
      "baseRefOid": "f235ae181fb4185016ffdba25a6a1c10e687a3ca",
      "headRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "headRefName": "Replace-masking-with-injective-non-zero-padding",
      "headRefOid": "6142992c17cd586db489951ea80fd520119f2d13",
      "closedAt": "2024-12-01T14:25:23Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOJat8lM6DqfLi",
      "title": "Replace masking with injective non-zero padding",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/pull/14",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-01T14:26:54Z",
      "updatedAt": "2024-12-06T12:02:06Z",
      "baseRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "baseRefName": "main",
      "baseRefOid": "adb4b56320a05ed53f37bcaad79815eb16b4bb08",
      "headRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "headRefName": "Replace-masking-with-injective-non-zero-padding-1",
      "headRefOid": "169d8f0ec3cca2d6c3973a256b0263f83ecee9c3",
      "closedAt": "2024-12-06T12:02:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "emanjon",
          "authorAssociation": "OWNER",
          "body": "#12 ",
          "createdAt": "2024-12-01T14:45:36Z",
          "updatedAt": "2024-12-01T14:45:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 17,
      "id": "PR_kwDOJat8lM6ESMzd",
      "title": "Galois Counter Mode with Secure Truncated Tags (GCM-STT)",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/pull/17",
      "state": "CLOSED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-06T07:32:32Z",
      "updatedAt": "2024-12-06T11:47:37Z",
      "baseRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "baseRefName": "main",
      "baseRefOid": "e60424e0424768da03d8d5aca6b2901262952608",
      "headRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "headRefName": "emanjon-patch-1",
      "headRefOid": "33fac775dbe7e6e7f7613a5fd5fa6718674c31d4",
      "closedAt": "2024-12-06T11:47:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 24,
      "id": "PR_kwDOJat8lM6ExiIm",
      "title": "Update draft-mattsson-cfrg-aes-gcm-sst.md",
      "url": "https://github.com/emanjon/draft-mattsson-cfrg-aes-gcm-sst/pull/24",
      "state": "MERGED",
      "author": "emanjon",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-10T22:50:14Z",
      "updatedAt": "2024-12-10T22:51:34Z",
      "baseRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "baseRefName": "main",
      "baseRefOid": "0b38250e6d4cae767d1ec36e7406605702c51785",
      "headRepository": "emanjon/draft-mattsson-cfrg-aes-gcm-sst",
      "headRefName": "emanjon-patch-2",
      "headRefOid": "84acd7fc307b574361a8c641eca1265cd8390d7b",
      "closedAt": "2024-12-10T22:51:29Z",
      "mergedAt": "2024-12-10T22:51:29Z",
      "mergedBy": "emanjon",
      "mergeCommit": {
        "oid": "2759cf75a7f89b27358e136eb2fc727709d68246"
      },
      "comments": [],
      "reviews": []
    }
  ]
}